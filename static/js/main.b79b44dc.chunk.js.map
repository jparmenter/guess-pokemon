{"version":3,"sources":["component/Game/Image/index.jsx","component/Game/Options/Option.jsx","component/Game/Options/index.jsx","logic/generate-prompt.js","component/Game/index.jsx","component/Results.jsx","component/App.jsx","index.js"],"names":["Image","react_default","a","createElement","className","this","props","selectedMonster","src","image","alt","React","Component","Option","handleChange","_this","changeHandler","monster","getLabelClass","answer","onChange","name","type","checked","value","Options","createQuestions","monsters","questions","i","length","push","Option_Option","key","getRandomIntInclusive","min","max","Math","ceil","floor","random","Game","state","answerSubmitted","results","answerMonster","submission","setState","history","historyChanged","nextQuestion","totalQuestions","finishedHandler","getButtonText","monsterLength","Pokemon","options","selectedAnswer","index","Object","objectSpread","generatePrompt","find","Image_Image","Options_Options","onClick","Result","trainerType","handleReset","resetHandler","getTotalCorrect","totalCorrect","forEach","question","App","showResults","updateHistory","resetGame","Results_Result","Game_Game","ReactDOM","render","App_App","document","getElementById"],"mappings":"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","file":"static/js/main.b79b44dc.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from \"prop-types\";\nimport './index.css';\n\nexport default class Image extends React.Component {\n  static propTypes = {\n    image: PropTypes.string,\n    selecteMonster: PropTypes.string\n  }\n  \n  render() {\n    return (\n      <img \n        className={this.props.selectedMonster ? '' : 'silhouette'}\n        src={this.props.image}\n        alt=\"Guess a Pokemon\" />\n    )\n  }\n}","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport './Option.css'\r\n\r\nexport default class Option extends React.Component {\r\n  static propTypes = {\r\n    changeHandler: PropTypes.func,\r\n    monster: PropTypes.object,\r\n    stage: PropTypes.number,\r\n    selectedMonster: PropTypes.string\r\n  }\r\n\r\n  handleChange = () => {\r\n    this.props.changeHandler(this.props.monster);\r\n  }\r\n\r\n  getLabelClass = () => {\r\n    if (!this.props.selectedMonster) {\r\n      return '';\r\n    }\r\n\r\n    return this.props.monster.answer ?\r\n    'answer' :\r\n    'incorrect'\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <li>\r\n        <label \r\n          className={this.getLabelClass()}>\r\n          <input\r\n            onChange={this.handleChange}\r\n            name=\"guess-input\"\r\n            type=\"radio\"\r\n            checked={this.props.selectedMonster === this.props.monster.name}\r\n            value={this.props.monster.name}/>\r\n            {this.props.monster.name}\r\n        </label>\r\n      </li>\r\n    );\r\n  }\r\n}","import React from 'react';\r\nimport Option from './Option';\r\nimport PropTypes from 'prop-types';\r\nimport './index.css';\r\n\r\nexport default class Options extends React.Component {\r\n  static propTypes = {\r\n    monsters: PropTypes.array,\r\n    changeHandler: PropTypes.func,\r\n    selectedMonster: PropTypes.string\r\n  }\r\n\r\n  handleChange = monster => {\r\n    this.props.changeHandler(monster);\r\n  }\r\n  \r\n  createQuestions = (monsters) => {\r\n    let questions = [];\r\n\r\n    for (let i = 0; i < monsters.length; i++) {\r\n      const monster = monsters[i];\r\n\r\n      questions.push(\r\n        <Option \r\n          key={i}\r\n          changeHandler={this.handleChange}\r\n          monster={monster}\r\n          selectedMonster={this.props.selectedMonster}/>\r\n      );\r\n    }\r\n\r\n    return questions;\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <ul>{this.createQuestions(this.props.monsters)}</ul>\r\n    );\r\n  }\r\n}","import Pokemon from '../data/pokemon.json';\n\nexport default function generatePrompt() {\n  const monsterLength = Pokemon.length - 1;\n  const options = [];\n  const selectedAnswer = getRandomIntInclusive(0, 3);\n\n  for (let i = 0; i < 4; i++) {\n    const index = getRandomIntInclusive(0, monsterLength);\n    options.push({\n      ...Pokemon[index],\n      answer: selectedAnswer === i,\n      index\n    });\n  }\n  \n  return options;\n}\n\nfunction getRandomIntInclusive(min, max) {\n  min = Math.ceil(min);\n  max = Math.floor(max);\n  return Math.floor(Math.random() * (max - min + 1)) + min;\n}","import React from 'react';\nimport PropTypes from 'prop-types'\nimport Image from './Image';\nimport Options from './Options';\nimport generatePrompt from '../../logic/generate-prompt';\n\nexport default class Game extends React.Component {\n  monsters;\n  answerMonster;\n  state = {\n    selectedMonster: ''\n  };\n  static propTypes = {\n    history: PropTypes.array,\n    historyChanged: PropTypes.func,\n    finishedHandler: PropTypes.func,\n    totalQuestions: PropTypes.number\n  }\n\n  answerSubmitted = monster => {\n    const results = {\n      answer: this.answerMonster,\n      submission: monster\n    };\n    this.setState({\n      selectedMonster: monster.name\n    });\n    this.props.history.push(results);\n    this.props.historyChanged(this.props.history);\n  }\n\n  nextQuestion = () => {\n    this.setState({\n      selectedMonster: ''\n    });\n\n    if (this.props.history.length > this.props.totalQuestions) {\n      this.props.finishedHandler();\n    }\n  }\n\n  getButtonText = () => {\n    return this.props.history.length > this.props.totalQuestions ?\n      'Finish' :\n      'Next';\n  }\n\n  render() {\n    if (!this.state.selectedMonster) {\n      this.monsters = generatePrompt();\n      this.answerMonster = this.monsters.find(monster => {\n        return monster.answer;\n      });\n    }\n\n    return (\n      <div className=\"game\">\n        <h1>Who's That Pokemon?</h1>\n        <Image \n          image={this.answerMonster.src}\n          selectedMonster={this.state.selectedMonster} />\n        <Options\n          monsters={this.monsters}\n          changeHandler={this.answerSubmitted}\n          selectedMonster={this.state.selectedMonster}/>\n        { this.state.selectedMonster ?  \n            <button onClick={this.nextQuestion} type=\"button\">{ this.getButtonText() }</button> :\n            null\n        }\n      </div>\n    );\n  }\n}\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nexport default class Result extends React.Component {\r\n  static propTypes = {\r\n    history: PropTypes.array,\r\n    resetHandler: PropTypes.func\r\n  }\r\n  trainerType = ['Crusty Juggler', 'Bug Catcher', 'Average', 'Pokemon Trainer', 'Pokemon Master']\r\n\r\n  handleReset = () => {\r\n    this.props.resetHandler();\r\n  }\r\n\r\n  getTotalCorrect = () => {\r\n    let totalCorrect = 0;\r\n\r\n    this.props.history.forEach(question => {\r\n      if (question.answer.name === question.submission.name) {\r\n        totalCorrect++;\r\n      }\r\n    });\r\n\r\n    return totalCorrect;\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <h1>You are a { this.trainerType[this.getTotalCorrect()] }</h1>\r\n        <p>{this.getTotalCorrect()} / {this.props.history.length}</p>\r\n        <button type=\"button\" onClick={this.handleReset}>Try Again?</button>\r\n      </div>\r\n    )\r\n  }\r\n}","import React from 'react';\nimport Game from './Game';\nimport Results from './Results';\nimport './App.css';\n\nexport default class App extends React.Component {\n  totalQuestions = 4;\n  state = {\n    history: [],\n    showResults: false\n  };\n\n  updateHistory = history => {\n    this.setState({\n      history\n    });\n  }\n\n  resetGame = () => {\n    this.setState({\n      history: [],\n      showResults: false\n    });\n  }\n\n  showResults = () => {\n    this.setState({\n      showResults: true\n    });\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        {\n          this.state.showResults ?\n            <Results\n              history={this.state.history}\n              resetHandler={this.resetGame}/> :\n            <Game\n              finishedHandler={this.showResults}\n              history={this.state.history}\n              historyChanged={this.updateHistory}\n              totalQuestions={this.totalQuestions}/>\n        }\n      </div>\n    );\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './component/App';\n\nReactDOM.render(<App />, document.getElementById('root'));"],"sourceRoot":""}