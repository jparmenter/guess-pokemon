{"version":3,"sources":["component/Game/Image/index.jsx","component/Game/Options/index.jsx","logic/generate-prompt.js","component/Game/index.jsx","component/Results.jsx","component/App.jsx","index.js"],"names":["Image","props","react_default","a","createElement","className","revealMonster","src","image","alt","useStyles","makeStyles","group","textTransform","Options","classes","getLabelClass","monster","value","answer","FormControl","component","RadioGroup","aria-label","name","onChange","event","monsters","find","mon","target","changeHandler","questions","i","length","push","FormControlLabel","control","Radio","label","createQuestions","generatePrompt","monsterLength","Pokemon","options","selectedAnswer","getRandomIntInclusive","index","Object","objectSpread","min","max","Math","ceil","floor","random","Game","_useState","useState","_useState2","slicedToArray","setValue","_useState3","_useState4","setMonsters","answerMonster","Typography","variant","gutterBottom","Image_Image","Options_Options","results","submission","history","historyChanged","Button","onClick","totalQuestions","finishedHandler","newMonsters","Result","trainerType","handleReset","_this","resetHandler","getTotalCorrect","totalCorrect","forEach","question","this","React","Component","root","textAlign","ReactDOM","render","setHistory","showResults","setShowResults","Fragment","Container","maxWidth","Grid","container","justify","alignItems","Results_Result","document","getElementById"],"mappings":"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","file":"static/js/main.c76c3f0b.chunk.js","sourcesContent":["import React from 'react';\nimport './index.css';\n\nexport default function Image(props) {\n  return (\n    <img \n      className={props.revealMonster ? '' : 'silhouette'}\n      src={props.image}\n      alt=\"Guess a Pokemon\" />\n  )\n}","import React from 'react';\nimport RadioGroup from '@material-ui/core/RadioGroup';\nimport FormControl from '@material-ui/core/FormControl';\nimport { makeStyles } from '@material-ui/core/styles';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport Radio from '@material-ui/core/Radio';\nimport './index.css';\n\nconst useStyles = makeStyles(() => ({\n  group: {\n    textTransform: 'capitalize'\n  }\n}));\n\nexport default function Options(props) {\n  const classes = useStyles();\n\n  function handleChange(event) {\n    const monster = props.monsters.find(mon => { return mon.name === event.target.value });\n    props.changeHandler(monster);\n  }\n  \n  function createQuestions(monsters) {\n    let questions = [];\n\n    for (let i = 0; i < monsters.length; i++) {\n      const monster = monsters[i];\n\n      questions.push(\n        <FormControlLabel \n          className={getLabelClass(monster)}\n          value={monster.name}\n          control={<Radio />}\n          label={monster.name}/>\n      );\n    }\n\n    return questions;\n  }\n\n  function getLabelClass(monster) {\n    if (!props.value) {\n      return '';\n    }\n\n    return monster.answer ?\n      'correct' :\n      'incorrect';\n  }\n\n  return (\n    <div>\n      <FormControl component=\"fieldset\">\n        <RadioGroup\n          className={classes.group}\n          aria-label=\"pokemon\"\n          name=\"pokemon\"\n          value={props.value}\n          onChange={handleChange}\n        >\n          { createQuestions(props.monsters) }\n        </RadioGroup>\n      </FormControl>\n    </div>\n  );\n}","import Pokemon from '../data/pokemon.json';\n\nexport default function generatePrompt() {\n  const monsterLength = Pokemon.length - 1;\n  const options = [];\n  const selectedAnswer = getRandomIntInclusive(0, 3);\n\n  for (let i = 0; i < 4; i++) {\n    const index = getRandomIntInclusive(0, monsterLength);\n    options.push({\n      ...Pokemon[index],\n      answer: selectedAnswer === i,\n      index\n    });\n  }\n  \n  return options;\n}\n\nfunction getRandomIntInclusive(min, max) {\n  min = Math.ceil(min);\n  max = Math.floor(max);\n  return Math.floor(Math.random() * (max - min + 1)) + min;\n}","import React, { useState } from 'react';\nimport Image from './Image';\nimport Options from './Options';\nimport generatePrompt from '../../logic/generate-prompt';\nimport Button from '@material-ui/core/Button';\nimport Typography from '@material-ui/core/Typography';\n\nexport default function Game(props) {\n  const [value, setValue] = useState('');\n  const [monsters, setMonsters] = useState(generatePrompt());\n  let answerMonster = monsters.find(monster => {\n    return monster.answer;\n  });;\n\n  function answerSubmitted(monster) {\n    const results = {\n      answer: answerMonster,\n      submission: monster\n    };\n    setValue(monster.name)\n    props.history.push(results);\n    props.historyChanged(props.history);\n  }\n\n  function nextQuestion() {\n    setValue('');\n\n    if (props.history.length > props.totalQuestions) {\n      props.finishedHandler();\n    } else {\n      const newMonsters = generatePrompt();\n      setMonsters(newMonsters);\n      answerMonster = newMonsters.find(monster => {\n        return monster.answer;\n      });\n    }\n  }\n\n  function getButtonText() {\n    return props.history.length > props.totalQuestions ?\n      'Finish' :\n      'Next';\n  }\n\n  return (\n    <div>\n      <Typography variant=\"h3\" gutterBottom>\n        Who's That Pokemon?\n      </Typography>\n      <Image \n        image={answerMonster.src}\n        revealMonster={value} />\n      <Options\n        monsters={monsters}\n        changeHandler={answerSubmitted}\n        value={value}/>\n      { value ?  \n          <Button onClick={nextQuestion} variant=\"contained\">{ getButtonText() }</Button> :\n          null\n      }\n    </div>\n  );\n}\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport Button from '@material-ui/core/Button';\n\nexport default class Result extends React.Component {\n  static propTypes = {\n    history: PropTypes.array,\n    resetHandler: PropTypes.func\n  }\n  trainerType = ['Crusty Juggler', 'Bug Catcher', 'Average', 'Cool Boy', 'Pokemon Trainer', 'Pokemon Master']\n\n  handleReset = () => {\n    this.props.resetHandler();\n  }\n\n  getTotalCorrect = () => {\n    let totalCorrect = 0;\n\n    this.props.history.forEach(question => {\n      if (question.answer.name === question.submission.name) {\n        totalCorrect++;\n      }\n    });\n\n    return totalCorrect;\n  }\n\n  render() {\n    return (\n      <div>\n        <h1>You are a { this.trainerType[this.getTotalCorrect()] }</h1>\n        <p>{this.getTotalCorrect()} / {this.props.history.length}</p>\n        <Button variant=\"contained\" onClick={this.handleReset}>Try Again?</Button>\n      </div>\n    )\n  }\n}","import React, { useState } from 'react';\nimport Game from './Game';\nimport Results from './Results';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Container from '@material-ui/core/Container';\nimport Grid from '@material-ui/core/Grid';\n\nconst useStyles = makeStyles(() => ({\n  root: {\n    textAlign: 'center'\n  }\n}));\n\nexport default function App() {\n  const [history, setHistory] = useState([]);\n  const [showResults, setShowResults] = useState(false);\n  const totalQuestions = 4;\n  const classes = useStyles();\n\n  function updateHistory(history) {\n    setHistory(history);\n  }\n\n  function resetGame() {\n    setHistory([]);\n    setShowResults(false);\n  }\n\n  return (\n    <React.Fragment>\n      <Container maxWidth=\"sm\">\n        <Grid\n          container\n          className={classes.root}\n          justify=\"center\"\n          alignItems=\"center\">\n          {\n            showResults ?\n              <Results\n                history={history}\n                resetHandler={resetGame}/> :\n              <Game\n                finishedHandler={() => setShowResults(true)}\n                history={history}\n                historyChanged={updateHistory}\n                totalQuestions={totalQuestions}/>\n          }\n        </Grid>\n      </Container>\n    </React.Fragment>\n  );\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './component/App';\n\nReactDOM.render(<App />, document.getElementById('root'));"],"sourceRoot":""}